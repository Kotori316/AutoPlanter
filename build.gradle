import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = '19.0'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'AutoPlanter'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') +
        '(' + System.getProperty('java.vendor') + ') ' +
        'Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: (project.parchmentMapping as String)
    // mappings channel: 'official', version: "1.18.2"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property 'forge.logging.markers', 'REGISTRIES'
            property("mixin.debug.export", "true")

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                auto_planter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                auto_planter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'auto_planter', '--all', '--output', file('src/generated/resources/')

            mods {
                auto_planter {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${project.forgeVersion}")
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
}

mixin {
    add sourceSets.main, "mixins.auto_planter.refmap.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    String vendor = "Kotori316"
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : vendor,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version.toString(),
                "Implementation-Vendor"   : vendor,
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                "MixinConfigs"            : "auto_planter.mixins.json",
                'Automatic-Module-Name'   : 'auto_planter',
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '289078'
        changelogType = 'markdown'
        changelog = "For Minecraft ${(project.forgeVersion as String).split("-")[0]} with Forge ${project.forgeVersion}"
        addGameVersion((project.forgeVersion as String).split("-")[0])
        addGameVersion 'Forge'
        releaseType = 'release'
        mainArtifact jar
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}
