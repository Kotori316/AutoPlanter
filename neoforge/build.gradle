import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("java")
    id("maven-publish")
    id("signing")
    id("net.neoforged.gradle.userdev").version("7.+")
    id("net.neoforged.gradle.mixin").version("7.+")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
    id("com.kotori316.plugin.cf").version("1.+")
}

version = project.modVersion
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

base {
    archivesName = "${project.baseName}-NeoForge-${project.minecraftVersion}"
}

minecraft {
    mappings {
        channel = official()
        version.put("minecraft", project.minecraftVersion)
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        jvmArguments.add("-XstartOnFirstThread")
    }
    client {
        workingDirectory = file("run")
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        systemProperty("mixin.debug.export", "true")
        modSource project.sourceSets.main
    }
    gameTestServer {
        workingDirectory = file("run-server")
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        modSource project.sourceSets.test
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
}

dependencies {
    implementation("net.neoforged:neoforge:${project.neo_version}")
    compileOnly project(":common")
}

tasks.named("compileJava", JavaCompile).configure {
    source(project(":common").sourceSets.main.allSource)
}

mixin {
    config("${project.mod_id}.mixins.json")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    String vendor = "Kotori316"
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : vendor,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version.toString(),
                "Implementation-Vendor"   : vendor,
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                "MixinConfigs"            : "${project.mod_id}.mixins.json",
                "Automatic-Module-Name"   : project.mod_id,
        ])
    }
}

jar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("jar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

tasks.register('srcJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.srcJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":neoforge:signJar")
        it.dependsOn(":neoforge:signSrcJar")
    }
}

import com.kotori316.plugin.cf.CallVersionFunctionTask
import com.kotori316.plugin.cf.CallVersionCheckFunctionTask

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = project.findProperty("minecraftVersion")
    platform = "neoforge"
    modName = project.findProperty("mod_id")
    changelog = "For ${project.findProperty("minecraftVersion")}"
    homepage = "https://modrinth.com/mod/auto-planter"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = project.findProperty("minecraftVersion")
    platform = "neoforge"
    modName = project.findProperty("mod_id")
    version = project.version
    failIfExists = Boolean.parseBoolean(System.getenv("FAIL_IF_EXISTS"))
}
