plugins {
    id("maven-publish")
    id("signing")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id("fabric-loom") version("1.8.10")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("com.modrinth.minotaur") version("2.+")
    id("com.kotori316.plugin.cf").version("3.+")
}

archivesBaseName = "${project.baseName}-Fabric-${project.minecraftVersion}"
version = project.modVersion
group = "com.kotori316"

println("Java: " + System.getProperty("java.version") +
        " JVM: " + System.getProperty("java.vm.version") +
        "(" + System.getProperty("java.vendor") + ")" +
        " Arch: " + System.getProperty("os.arch"))

loom {
    runs {
        named("client") {
            configName = "Client"
            runDir = "run"
        }
        create("gameTestServer") {
            configName = "GameTestServer"
            server()
            //noinspection SpellCheckingInspection
            vmArgs(
                    "-ea",
                    "-Dfabric-api.gametest",
                    "-Dfabric-api.gametest.report-file=game_test/test-results/test/game_test.xml"
            )
            runDir = "run-server"
            source(sourceSets.getAt("test"))
        }
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "Kotori316 Plugin"
        url = uri("https://maven.kotori316.com/")
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.layered {
        it.officialMojangMappings()
        String parchmentMC = project.property("parchment_mapping_mc")
        String parchmentDate = project.property("parchment_mapping_version")
        it.parchment("org.parchmentmc.data:parchment-$parchmentMC:$parchmentDate@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    compileOnly project(":common")

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("com.kotori316:VersionCheckerMod:${project.property("automatic_potato_version")}") {
        transitive(false)
    }
    modLocalRuntime("com.kotori316:debug-utility-fabric:${project.property("debug_util_version")}")

    testImplementation(project(":common"))
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand([
                "version"  : project.version,
                "mcVersion": project.property("minecraftVersion"),
        ])
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    source(project(":common").sourceSets.main.allSource)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = "289078"
        changelogType = "markdown"
        changelog = "For Minecraft ${project.minecraftVersion} with Fabric ${project.fabric_version}"
        addGameVersion(project.minecraftVersion)
        addGameVersion "Fabric"
        releaseType = "beta"
        mainArtifact remapJar

        relations {
            requiredDependency("automatic-potato")
        }
    }
    options {
        curseGradleOptions.debug = !Boolean.parseBoolean(project.releaseMode) // defaults to false
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "auto-planter"
    versionType = "release"
    versionName = "${project.version}-fabric"
    versionNumber.set(project.version.toString())
    uploadFile = tasks.remapJar
    getGameVersions().set([project.minecraftVersion])
    getLoaders().set(["fabric"])
    changelog = "For Minecraft ${project.minecraftVersion} with Fabric ${project.fabric_version}"
    debugMode = !Boolean.parseBoolean(project.releaseMode)
    dependencies {
        required.project("automatic-potato")
    }
}

publishing {
    if (Boolean.parseBoolean(project.releaseMode)) {
        repositories {
            def u = project.findProperty("maven_username") as String ?: System.getenv("MAVEN_USERNAME") ?: ""
            def p = project.findProperty("maven_password") as String ?: System.getenv("MAVEN_PASSWORD") ?: ""
            if (u != "" && p != "") {
                maven {
                    name = "kotori316-maven"
                    // For users: Use https://maven.kotori316.com to get artifacts
                    url = uri("https://maven2.kotori316.com/production/maven")
                    credentials {
                        username = u
                        password = p
                    }
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName.toLowerCase()
            from components.java
            pom {
                name = archivesBaseName
                description = "AutoPlanter for Minecraft ${project.minecraftVersion} and Fabric ${project.fabric_version}"
                url = "https://github.com/Kotori316/AutoPlanter"
                packaging = "jar"
            }
        }
    }
}

remapJar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("remapJar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: remapJar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.remapJar, tasks.sourcesJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":fabric:signRemapJar")
    }
}


import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = project.findProperty("minecraftVersion") as String
    platform = "fabric"
    platformVersion = project.findProperty("fabric_version") as String
    modName = project.findProperty("mod_id") as String
    changelog = "For ${project.findProperty("minecraftVersion")}"
    homepage = "https://modrinth.com/mod/auto-planter"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = project.findProperty("minecraftVersion") as String
    platform = "fabric"
    modName = project.findProperty("mod_id") as String
    version = project.version
    failIfExists = Boolean.parseBoolean(System.getenv("FAIL_IF_EXISTS"))
}
